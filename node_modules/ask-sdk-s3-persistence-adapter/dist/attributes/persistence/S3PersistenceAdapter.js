"use strict";
/*
 * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var ask_sdk_core_1 = require("ask-sdk-core");
var aws_sdk_1 = require("aws-sdk");
var path = require("path");
var ObjectKeyGenerators_1 = require("./ObjectKeyGenerators");
/**
 * Implementation of {@link PersistenceAdapter} using AWS S3
 */
var S3PersistenceAdapter = /** @class */ (function () {
    function S3PersistenceAdapter(config) {
        this.bucketName = config.bucketName;
        this.s3Client = config.s3Client ? config.s3Client : new aws_sdk_1.S3({ apiVersion: 'latest' });
        this.objectKeyGenerator = config.objectKeyGenerator ? config.objectKeyGenerator : ObjectKeyGenerators_1.ObjectKeyGenerators.userId;
        this.pathPrefix = config.pathPrefix ? config.pathPrefix : '';
    }
    /**
     * Retrieves persistence attributes from AWS S3.
     * @param {RequestEnvelope} requestEnvelope Request envelope used to generate object key.
     * @returns {Promise<Object.<string, any>>}
     */
    S3PersistenceAdapter.prototype.getAttributes = function (requestEnvelope) {
        return __awaiter(this, void 0, void 0, function () {
            var objectId, getParams, data, err_1, bodyString, bodyObj;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        objectId = path.join(this.pathPrefix, this.objectKeyGenerator(requestEnvelope));
                        getParams = {
                            Bucket: this.bucketName,
                            Key: objectId,
                        };
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.s3Client.getObject(getParams).promise()];
                    case 2:
                        data = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _a.sent();
                        if (err_1.code === 'NoSuchKey') {
                            return [2 /*return*/, {}];
                        }
                        throw ask_sdk_core_1.createAskSdkError(this.constructor.name, "Could not read item (" + objectId + ") from bucket (" + getParams.Bucket + "): " + err_1.message);
                    case 4:
                        bodyString = data.Body ? data.Body.toString() : '';
                        try {
                            bodyObj = bodyString ? JSON.parse(bodyString) : {};
                        }
                        catch (err) {
                            throw new SyntaxError("Failed trying to parse the data body: " + data.Body.toString());
                        }
                        return [2 /*return*/, bodyObj];
                }
            });
        });
    };
    /**
     * Saves persistence attributes to AWS S3.
     * @param {RequestEnvelope} requestEnvelope Request envelope used to generate object key.
     * @param {Object.<string, any>} attributes Attributes to be saved to DynamoDB.
     * @return {Promise<void>}
     */
    S3PersistenceAdapter.prototype.saveAttributes = function (requestEnvelope, attributes) {
        return __awaiter(this, void 0, void 0, function () {
            var objectId, putParams, err_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        objectId = path.join(this.pathPrefix, this.objectKeyGenerator(requestEnvelope));
                        putParams = {
                            Bucket: this.bucketName,
                            Key: objectId,
                            Body: JSON.stringify(attributes),
                        };
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.s3Client.putObject(putParams).promise()];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_2 = _a.sent();
                        throw ask_sdk_core_1.createAskSdkError(this.constructor.name, "Could not save item (" + objectId + ") to bucket (" + putParams.Bucket + "): " + err_2.message);
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    return S3PersistenceAdapter;
}());
exports.S3PersistenceAdapter = S3PersistenceAdapter;
//# sourceMappingURL=S3PersistenceAdapter.js.map